1. Salaries Differences 

WITH max_dep AS
    (SELECT department, max(salary) max_sal
    FROM db_employee de
    JOIN db_dept dd ON de.department_id = dd.id
    GROUP BY department)
    
SELECT 
    ABS((SELECT max_sal from max_dep WHERE department = 'marketing')
        - (SELECT max_sal from max_dep WHERE department = 'engineering'))

-- different approach
SELECT 
    ABS(MAX(CASE WHEN department = 'marketing' THEN salary ELSE NULL END)
    - MAX(CASE WHEN department = 'engineering' THEN salary ELSE NULL END)) AS DIFF
FROM db_employee de
JOIN db_dept dd ON de.department_id = dd.id

2. Employees Current Salary

SELECT 
    id, first_name, last_name, department_id, MAX(salary) current_salary
FROM ms_employee_salary
GROUP BY id
ORDER BY id

3. Bikes Last Used

select 
    bike_number, max(end_time) last_used
from dc_bikeshare_q1_2012
group by bike_number
order by max(end_time);

4. Count the number of movies that Abigail Breslin nominated for oscar

select count(*)
from oscar_nominees
where nominee = 'Abigail Breslin';

5. Find all posts which were reacted to with a heart

select
    distinct fp.*
from facebook_posts fp
join facebook_reactions fr on fp.post_id = fr.post_id
where fr.reaction = 'heart';

6. Users By Average Session Time

-- key points: 
-- Output the user_id and their average session time.
-- consider only the latest page_load and earliest page_exit

-- solution strategy: 
-- 1. get data: user_id, date, exit for eache user by date
-- 2. get data: user_id, date, load for eache user by date
-- 3. join the load and exit table and calulate average session: exit - lower per user

with exit as
    (select 
        user_id
        , date(timestamp) as date
        , min(timestamp) as exit
    from facebook_web_log
    where action = 'page_exit'
    group by 1, 2)
     
    , load as
    (select 
        user_id
        , date(timestamp) as date
        , max(timestamp) as load
    from facebook_web_log
    where action = 'page_load'
    group by 1, 2)
    
select
    e.user_id
    , avg(exit - load)
from exit e
join load l 
    on e.user_id = l.user_id
    and e.date = l.date 
group by 1

7. Finding User Purchases

-- key points: 
-- need to identify returning active users
-- A returning active user is a user that has made a second purchase within 7 days of any other of their purchases
-- Output a list of user_ids of these returning active users.

-- solution steps: 
-- get second transation through a cte
-- then print the distinct user_id where the diff is < 8

with cte as
    (select 
        user_id
        , created_at
        , lead(created_at, 1) over(partition by user_id order by created_at) as next_transaction
    from amazon_transactions)

select 
    distinct user_id
from cte
where next_transaction - created_at < 8;
